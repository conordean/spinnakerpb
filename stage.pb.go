// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stage.proto

package spinnakerpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Stage struct {
	// Types that are valid to be assigned to Stage:
	//	*Stage_ManualJudgment
	//	*Stage_DeployManifest
	//	*Stage_BakeManifest
	Stage                isStage_Stage `protobuf_oneof:"stage"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Stage) Reset()         { *m = Stage{} }
func (m *Stage) String() string { return proto.CompactTextString(m) }
func (*Stage) ProtoMessage()    {}
func (*Stage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a92368e03f1c791, []int{0}
}
func (m *Stage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stage.Merge(m, src)
}
func (m *Stage) XXX_Size() int {
	return m.Size()
}
func (m *Stage) XXX_DiscardUnknown() {
	xxx_messageInfo_Stage.DiscardUnknown(m)
}

var xxx_messageInfo_Stage proto.InternalMessageInfo

type isStage_Stage interface {
	isStage_Stage()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Stage_ManualJudgment struct {
	ManualJudgment *ManualJudgmentStage `protobuf:"bytes,1,opt,name=manualJudgment,proto3,oneof"`
}
type Stage_DeployManifest struct {
	DeployManifest *DeployManifestStage `protobuf:"bytes,2,opt,name=deployManifest,proto3,oneof"`
}
type Stage_BakeManifest struct {
	BakeManifest *BakeManifestStage `protobuf:"bytes,3,opt,name=bakeManifest,proto3,oneof"`
}

func (*Stage_ManualJudgment) isStage_Stage() {}
func (*Stage_DeployManifest) isStage_Stage() {}
func (*Stage_BakeManifest) isStage_Stage()   {}

func (m *Stage) GetStage() isStage_Stage {
	if m != nil {
		return m.Stage
	}
	return nil
}

func (m *Stage) GetManualJudgment() *ManualJudgmentStage {
	if x, ok := m.GetStage().(*Stage_ManualJudgment); ok {
		return x.ManualJudgment
	}
	return nil
}

func (m *Stage) GetDeployManifest() *DeployManifestStage {
	if x, ok := m.GetStage().(*Stage_DeployManifest); ok {
		return x.DeployManifest
	}
	return nil
}

func (m *Stage) GetBakeManifest() *BakeManifestStage {
	if x, ok := m.GetStage().(*Stage_BakeManifest); ok {
		return x.BakeManifest
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Stage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Stage_ManualJudgment)(nil),
		(*Stage_DeployManifest)(nil),
		(*Stage_BakeManifest)(nil),
	}
}

type StageEnabled struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Expression           string   `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StageEnabled) Reset()         { *m = StageEnabled{} }
func (m *StageEnabled) String() string { return proto.CompactTextString(m) }
func (*StageEnabled) ProtoMessage()    {}
func (*StageEnabled) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a92368e03f1c791, []int{1}
}
func (m *StageEnabled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StageEnabled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StageEnabled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StageEnabled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StageEnabled.Merge(m, src)
}
func (m *StageEnabled) XXX_Size() int {
	return m.Size()
}
func (m *StageEnabled) XXX_DiscardUnknown() {
	xxx_messageInfo_StageEnabled.DiscardUnknown(m)
}

var xxx_messageInfo_StageEnabled proto.InternalMessageInfo

func (m *StageEnabled) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *StageEnabled) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

type RestrictedExecutionWindow struct {
	Days                 []int32                                `protobuf:"varint,1,rep,packed,name=days,proto3" json:"days,omitempty"`
	Jitter               *RestrictedExecutionWindow_Jitter      `protobuf:"bytes,2,opt,name=jitter,proto3" json:"jitter,omitempty"`
	Whitelist            []*RestrictedExecutionWindow_Whitelist `protobuf:"bytes,3,rep,name=whitelist,proto3" json:"whitelist,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *RestrictedExecutionWindow) Reset()         { *m = RestrictedExecutionWindow{} }
func (m *RestrictedExecutionWindow) String() string { return proto.CompactTextString(m) }
func (*RestrictedExecutionWindow) ProtoMessage()    {}
func (*RestrictedExecutionWindow) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a92368e03f1c791, []int{2}
}
func (m *RestrictedExecutionWindow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestrictedExecutionWindow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestrictedExecutionWindow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestrictedExecutionWindow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestrictedExecutionWindow.Merge(m, src)
}
func (m *RestrictedExecutionWindow) XXX_Size() int {
	return m.Size()
}
func (m *RestrictedExecutionWindow) XXX_DiscardUnknown() {
	xxx_messageInfo_RestrictedExecutionWindow.DiscardUnknown(m)
}

var xxx_messageInfo_RestrictedExecutionWindow proto.InternalMessageInfo

func (m *RestrictedExecutionWindow) GetDays() []int32 {
	if m != nil {
		return m.Days
	}
	return nil
}

func (m *RestrictedExecutionWindow) GetJitter() *RestrictedExecutionWindow_Jitter {
	if m != nil {
		return m.Jitter
	}
	return nil
}

func (m *RestrictedExecutionWindow) GetWhitelist() []*RestrictedExecutionWindow_Whitelist {
	if m != nil {
		return m.Whitelist
	}
	return nil
}

type RestrictedExecutionWindow_Jitter struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	MaxDelay             int32    `protobuf:"varint,2,opt,name=maxDelay,proto3" json:"maxDelay,omitempty"`
	MinDelay             int32    `protobuf:"varint,3,opt,name=minDelay,proto3" json:"minDelay,omitempty"`
	SkipManual           bool     `protobuf:"varint,4,opt,name=skipManual,proto3" json:"skipManual,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestrictedExecutionWindow_Jitter) Reset()         { *m = RestrictedExecutionWindow_Jitter{} }
func (m *RestrictedExecutionWindow_Jitter) String() string { return proto.CompactTextString(m) }
func (*RestrictedExecutionWindow_Jitter) ProtoMessage()    {}
func (*RestrictedExecutionWindow_Jitter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a92368e03f1c791, []int{2, 0}
}
func (m *RestrictedExecutionWindow_Jitter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestrictedExecutionWindow_Jitter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestrictedExecutionWindow_Jitter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestrictedExecutionWindow_Jitter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestrictedExecutionWindow_Jitter.Merge(m, src)
}
func (m *RestrictedExecutionWindow_Jitter) XXX_Size() int {
	return m.Size()
}
func (m *RestrictedExecutionWindow_Jitter) XXX_DiscardUnknown() {
	xxx_messageInfo_RestrictedExecutionWindow_Jitter.DiscardUnknown(m)
}

var xxx_messageInfo_RestrictedExecutionWindow_Jitter proto.InternalMessageInfo

func (m *RestrictedExecutionWindow_Jitter) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *RestrictedExecutionWindow_Jitter) GetMaxDelay() int32 {
	if m != nil {
		return m.MaxDelay
	}
	return 0
}

func (m *RestrictedExecutionWindow_Jitter) GetMinDelay() int32 {
	if m != nil {
		return m.MinDelay
	}
	return 0
}

func (m *RestrictedExecutionWindow_Jitter) GetSkipManual() bool {
	if m != nil {
		return m.SkipManual
	}
	return false
}

type RestrictedExecutionWindow_Whitelist struct {
	EndHour              int32    `protobuf:"varint,1,opt,name=endHour,proto3" json:"endHour,omitempty"`
	EndMin               int32    `protobuf:"varint,2,opt,name=endMin,proto3" json:"endMin,omitempty"`
	StartHour            int32    `protobuf:"varint,3,opt,name=startHour,proto3" json:"startHour,omitempty"`
	StartMin             int32    `protobuf:"varint,4,opt,name=startMin,proto3" json:"startMin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestrictedExecutionWindow_Whitelist) Reset()         { *m = RestrictedExecutionWindow_Whitelist{} }
func (m *RestrictedExecutionWindow_Whitelist) String() string { return proto.CompactTextString(m) }
func (*RestrictedExecutionWindow_Whitelist) ProtoMessage()    {}
func (*RestrictedExecutionWindow_Whitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a92368e03f1c791, []int{2, 1}
}
func (m *RestrictedExecutionWindow_Whitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestrictedExecutionWindow_Whitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestrictedExecutionWindow_Whitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestrictedExecutionWindow_Whitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestrictedExecutionWindow_Whitelist.Merge(m, src)
}
func (m *RestrictedExecutionWindow_Whitelist) XXX_Size() int {
	return m.Size()
}
func (m *RestrictedExecutionWindow_Whitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_RestrictedExecutionWindow_Whitelist.DiscardUnknown(m)
}

var xxx_messageInfo_RestrictedExecutionWindow_Whitelist proto.InternalMessageInfo

func (m *RestrictedExecutionWindow_Whitelist) GetEndHour() int32 {
	if m != nil {
		return m.EndHour
	}
	return 0
}

func (m *RestrictedExecutionWindow_Whitelist) GetEndMin() int32 {
	if m != nil {
		return m.EndMin
	}
	return 0
}

func (m *RestrictedExecutionWindow_Whitelist) GetStartHour() int32 {
	if m != nil {
		return m.StartHour
	}
	return 0
}

func (m *RestrictedExecutionWindow_Whitelist) GetStartMin() int32 {
	if m != nil {
		return m.StartMin
	}
	return 0
}

type ManualJudgmentStage struct {
	// common
	Type                              string                               `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	RefId                             string                               `protobuf:"bytes,2,opt,name=refId,proto3" json:"refId,omitempty"`
	Name                              string                               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	RequisiteStageRefIds              []string                             `protobuf:"bytes,4,rep,name=requisiteStageRefIds,proto3" json:"requisiteStageRefIds,omitempty"`
	SendNotifications                 bool                                 `protobuf:"varint,5,opt,name=sendNotifications,proto3" json:"sendNotifications,omitempty"`
	Notifications                     []*Notification                      `protobuf:"bytes,6,rep,name=notifications,proto3" json:"notifications,omitempty"`
	StageTimeoutMs                    int32                                `protobuf:"varint,7,opt,name=stageTimeoutMs,proto3" json:"stageTimeoutMs,omitempty"`
	CompleteOtherBranchesThenFail     bool                                 `protobuf:"varint,8,opt,name=completeOtherBranchesThenFail,proto3" json:"completeOtherBranchesThenFail,omitempty"`
	ContinuePipeline                  bool                                 `protobuf:"varint,9,opt,name=continuePipeline,proto3" json:"continuePipeline,omitempty"`
	FailPipeline                      bool                                 `protobuf:"varint,10,opt,name=failPipeline,proto3" json:"failPipeline,omitempty"`
	FailOnFailedExpressions           bool                                 `protobuf:"varint,11,opt,name=failOnFailedExpressions,proto3" json:"failOnFailedExpressions,omitempty"`
	StageEnabled                      *StageEnabled                        `protobuf:"bytes,12,opt,name=stageEnabled,proto3" json:"stageEnabled,omitempty"`
	RestrictExecutionDuringTimeWindow bool                                 `protobuf:"varint,13,opt,name=restrictExecutionDuringTimeWindow,proto3" json:"restrictExecutionDuringTimeWindow,omitempty"`
	RestrictedExecutionWindow         *RestrictedExecutionWindow           `protobuf:"bytes,14,opt,name=restrictedExecutionWindow,proto3" json:"restrictedExecutionWindow,omitempty"`
	SkipWindowText                    string                               `protobuf:"bytes,15,opt,name=skipWindowText,proto3" json:"skipWindowText,omitempty"`
	Instructions                      string                               `protobuf:"bytes,101,opt,name=instructions,proto3" json:"instructions,omitempty"`
	PropagateAuthenticationContext    bool                                 `protobuf:"varint,102,opt,name=propagateAuthenticationContext,proto3" json:"propagateAuthenticationContext,omitempty"`
	JudgmentInputs                    []*ManualJudgmentStage_JudgmentInput `protobuf:"bytes,103,rep,name=judgmentInputs,proto3" json:"judgmentInputs,omitempty"`
	XXX_NoUnkeyedLiteral              struct{}                             `json:"-"`
	XXX_unrecognized                  []byte                               `json:"-"`
	XXX_sizecache                     int32                                `json:"-"`
}

func (m *ManualJudgmentStage) Reset()         { *m = ManualJudgmentStage{} }
func (m *ManualJudgmentStage) String() string { return proto.CompactTextString(m) }
func (*ManualJudgmentStage) ProtoMessage()    {}
func (*ManualJudgmentStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a92368e03f1c791, []int{3}
}
func (m *ManualJudgmentStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManualJudgmentStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManualJudgmentStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManualJudgmentStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManualJudgmentStage.Merge(m, src)
}
func (m *ManualJudgmentStage) XXX_Size() int {
	return m.Size()
}
func (m *ManualJudgmentStage) XXX_DiscardUnknown() {
	xxx_messageInfo_ManualJudgmentStage.DiscardUnknown(m)
}

var xxx_messageInfo_ManualJudgmentStage proto.InternalMessageInfo

func (m *ManualJudgmentStage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ManualJudgmentStage) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *ManualJudgmentStage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ManualJudgmentStage) GetRequisiteStageRefIds() []string {
	if m != nil {
		return m.RequisiteStageRefIds
	}
	return nil
}

func (m *ManualJudgmentStage) GetSendNotifications() bool {
	if m != nil {
		return m.SendNotifications
	}
	return false
}

func (m *ManualJudgmentStage) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *ManualJudgmentStage) GetStageTimeoutMs() int32 {
	if m != nil {
		return m.StageTimeoutMs
	}
	return 0
}

func (m *ManualJudgmentStage) GetCompleteOtherBranchesThenFail() bool {
	if m != nil {
		return m.CompleteOtherBranchesThenFail
	}
	return false
}

func (m *ManualJudgmentStage) GetContinuePipeline() bool {
	if m != nil {
		return m.ContinuePipeline
	}
	return false
}

func (m *ManualJudgmentStage) GetFailPipeline() bool {
	if m != nil {
		return m.FailPipeline
	}
	return false
}

func (m *ManualJudgmentStage) GetFailOnFailedExpressions() bool {
	if m != nil {
		return m.FailOnFailedExpressions
	}
	return false
}

func (m *ManualJudgmentStage) GetStageEnabled() *StageEnabled {
	if m != nil {
		return m.StageEnabled
	}
	return nil
}

func (m *ManualJudgmentStage) GetRestrictExecutionDuringTimeWindow() bool {
	if m != nil {
		return m.RestrictExecutionDuringTimeWindow
	}
	return false
}

func (m *ManualJudgmentStage) GetRestrictedExecutionWindow() *RestrictedExecutionWindow {
	if m != nil {
		return m.RestrictedExecutionWindow
	}
	return nil
}

func (m *ManualJudgmentStage) GetSkipWindowText() string {
	if m != nil {
		return m.SkipWindowText
	}
	return ""
}

func (m *ManualJudgmentStage) GetInstructions() string {
	if m != nil {
		return m.Instructions
	}
	return ""
}

func (m *ManualJudgmentStage) GetPropagateAuthenticationContext() bool {
	if m != nil {
		return m.PropagateAuthenticationContext
	}
	return false
}

func (m *ManualJudgmentStage) GetJudgmentInputs() []*ManualJudgmentStage_JudgmentInput {
	if m != nil {
		return m.JudgmentInputs
	}
	return nil
}

// fields
type ManualJudgmentStage_JudgmentInput struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManualJudgmentStage_JudgmentInput) Reset()         { *m = ManualJudgmentStage_JudgmentInput{} }
func (m *ManualJudgmentStage_JudgmentInput) String() string { return proto.CompactTextString(m) }
func (*ManualJudgmentStage_JudgmentInput) ProtoMessage()    {}
func (*ManualJudgmentStage_JudgmentInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a92368e03f1c791, []int{3, 0}
}
func (m *ManualJudgmentStage_JudgmentInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManualJudgmentStage_JudgmentInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManualJudgmentStage_JudgmentInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManualJudgmentStage_JudgmentInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManualJudgmentStage_JudgmentInput.Merge(m, src)
}
func (m *ManualJudgmentStage_JudgmentInput) XXX_Size() int {
	return m.Size()
}
func (m *ManualJudgmentStage_JudgmentInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ManualJudgmentStage_JudgmentInput.DiscardUnknown(m)
}

var xxx_messageInfo_ManualJudgmentStage_JudgmentInput proto.InternalMessageInfo

func (m *ManualJudgmentStage_JudgmentInput) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type DeployManifestStage struct {
	// common
	Type                              string                     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	RefId                             string                     `protobuf:"bytes,2,opt,name=refId,proto3" json:"refId,omitempty"`
	Name                              string                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	RequisiteStageRefIds              []string                   `protobuf:"bytes,4,rep,name=requisiteStageRefIds,proto3" json:"requisiteStageRefIds,omitempty"`
	SendNotifications                 bool                       `protobuf:"varint,5,opt,name=sendNotifications,proto3" json:"sendNotifications,omitempty"`
	Notifications                     []*Notification            `protobuf:"bytes,6,rep,name=notifications,proto3" json:"notifications,omitempty"`
	StageTimeoutMs                    int32                      `protobuf:"varint,7,opt,name=stageTimeoutMs,proto3" json:"stageTimeoutMs,omitempty"`
	CompleteOtherBranchesThenFail     bool                       `protobuf:"varint,8,opt,name=completeOtherBranchesThenFail,proto3" json:"completeOtherBranchesThenFail,omitempty"`
	ContinuePipeline                  bool                       `protobuf:"varint,9,opt,name=continuePipeline,proto3" json:"continuePipeline,omitempty"`
	FailPipeline                      bool                       `protobuf:"varint,10,opt,name=failPipeline,proto3" json:"failPipeline,omitempty"`
	FailOnFailedExpressions           bool                       `protobuf:"varint,11,opt,name=failOnFailedExpressions,proto3" json:"failOnFailedExpressions,omitempty"`
	StageEnabled                      *StageEnabled              `protobuf:"bytes,12,opt,name=stageEnabled,proto3" json:"stageEnabled,omitempty"`
	RestrictExecutionDuringTimeWindow bool                       `protobuf:"varint,13,opt,name=restrictExecutionDuringTimeWindow,proto3" json:"restrictExecutionDuringTimeWindow,omitempty"`
	RestrictedExecutionWindow         *RestrictedExecutionWindow `protobuf:"bytes,14,opt,name=restrictedExecutionWindow,proto3" json:"restrictedExecutionWindow,omitempty"`
	SkipWindowText                    string                     `protobuf:"bytes,15,opt,name=skipWindowText,proto3" json:"skipWindowText,omitempty"`
	Account                           string                     `protobuf:"bytes,101,opt,name=account,proto3" json:"account,omitempty"`
	CloudProvider                     string                     `protobuf:"bytes,102,opt,name=cloudProvider,proto3" json:"cloudProvider,omitempty"`
	Moniker                           *Moniker                   `protobuf:"bytes,103,opt,name=moniker,proto3" json:"moniker,omitempty"`
	NamespaceOverride                 string                     `protobuf:"bytes,104,opt,name=namespaceOverride,proto3" json:"namespaceOverride,omitempty"`
	Source                            string                     `protobuf:"bytes,105,opt,name=source,proto3" json:"source,omitempty"`
	// only used when source = artifact
	ManifestArtifactAccount  string `protobuf:"bytes,106,opt,name=manifestArtifactAccount,proto3" json:"manifestArtifactAccount,omitempty"`
	ManifestArtifactId       string `protobuf:"bytes,107,opt,name=manifestArtifactId,proto3" json:"manifestArtifactId,omitempty"`
	SkipExpressionEvaluation bool   `protobuf:"varint,108,opt,name=skipExpressionEvaluation,proto3" json:"skipExpressionEvaluation,omitempty"`
	// only used when source = text
	Manifests            []string                               `protobuf:"bytes,109,rep,name=manifests,proto3" json:"manifests,omitempty"`
	RequiredArtifactIds  []string                               `protobuf:"bytes,110,rep,name=requiredArtifactIds,proto3" json:"requiredArtifactIds,omitempty"`
	TrafficManagement    *DeployManifestStage_TrafficManagement `protobuf:"bytes,111,opt,name=trafficManagement,proto3" json:"trafficManagement,omitempty"`
	ExpectedArtifacts    []*ExpectedArtifact                    `protobuf:"bytes,112,rep,name=expectedArtifacts,proto3" json:"expectedArtifacts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *DeployManifestStage) Reset()         { *m = DeployManifestStage{} }
func (m *DeployManifestStage) String() string { return proto.CompactTextString(m) }
func (*DeployManifestStage) ProtoMessage()    {}
func (*DeployManifestStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a92368e03f1c791, []int{4}
}
func (m *DeployManifestStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeployManifestStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeployManifestStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeployManifestStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployManifestStage.Merge(m, src)
}
func (m *DeployManifestStage) XXX_Size() int {
	return m.Size()
}
func (m *DeployManifestStage) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployManifestStage.DiscardUnknown(m)
}

var xxx_messageInfo_DeployManifestStage proto.InternalMessageInfo

func (m *DeployManifestStage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DeployManifestStage) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *DeployManifestStage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeployManifestStage) GetRequisiteStageRefIds() []string {
	if m != nil {
		return m.RequisiteStageRefIds
	}
	return nil
}

func (m *DeployManifestStage) GetSendNotifications() bool {
	if m != nil {
		return m.SendNotifications
	}
	return false
}

func (m *DeployManifestStage) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *DeployManifestStage) GetStageTimeoutMs() int32 {
	if m != nil {
		return m.StageTimeoutMs
	}
	return 0
}

func (m *DeployManifestStage) GetCompleteOtherBranchesThenFail() bool {
	if m != nil {
		return m.CompleteOtherBranchesThenFail
	}
	return false
}

func (m *DeployManifestStage) GetContinuePipeline() bool {
	if m != nil {
		return m.ContinuePipeline
	}
	return false
}

func (m *DeployManifestStage) GetFailPipeline() bool {
	if m != nil {
		return m.FailPipeline
	}
	return false
}

func (m *DeployManifestStage) GetFailOnFailedExpressions() bool {
	if m != nil {
		return m.FailOnFailedExpressions
	}
	return false
}

func (m *DeployManifestStage) GetStageEnabled() *StageEnabled {
	if m != nil {
		return m.StageEnabled
	}
	return nil
}

func (m *DeployManifestStage) GetRestrictExecutionDuringTimeWindow() bool {
	if m != nil {
		return m.RestrictExecutionDuringTimeWindow
	}
	return false
}

func (m *DeployManifestStage) GetRestrictedExecutionWindow() *RestrictedExecutionWindow {
	if m != nil {
		return m.RestrictedExecutionWindow
	}
	return nil
}

func (m *DeployManifestStage) GetSkipWindowText() string {
	if m != nil {
		return m.SkipWindowText
	}
	return ""
}

func (m *DeployManifestStage) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *DeployManifestStage) GetCloudProvider() string {
	if m != nil {
		return m.CloudProvider
	}
	return ""
}

func (m *DeployManifestStage) GetMoniker() *Moniker {
	if m != nil {
		return m.Moniker
	}
	return nil
}

func (m *DeployManifestStage) GetNamespaceOverride() string {
	if m != nil {
		return m.NamespaceOverride
	}
	return ""
}

func (m *DeployManifestStage) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *DeployManifestStage) GetManifestArtifactAccount() string {
	if m != nil {
		return m.ManifestArtifactAccount
	}
	return ""
}

func (m *DeployManifestStage) GetManifestArtifactId() string {
	if m != nil {
		return m.ManifestArtifactId
	}
	return ""
}

func (m *DeployManifestStage) GetSkipExpressionEvaluation() bool {
	if m != nil {
		return m.SkipExpressionEvaluation
	}
	return false
}

func (m *DeployManifestStage) GetManifests() []string {
	if m != nil {
		return m.Manifests
	}
	return nil
}

func (m *DeployManifestStage) GetRequiredArtifactIds() []string {
	if m != nil {
		return m.RequiredArtifactIds
	}
	return nil
}

func (m *DeployManifestStage) GetTrafficManagement() *DeployManifestStage_TrafficManagement {
	if m != nil {
		return m.TrafficManagement
	}
	return nil
}

func (m *DeployManifestStage) GetExpectedArtifacts() []*ExpectedArtifact {
	if m != nil {
		return m.ExpectedArtifacts
	}
	return nil
}

// fields
type DeployManifestStage_TrafficManagement struct {
	Enabled              bool                                           `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Options              *DeployManifestStage_TrafficManagement_Options `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                       `json:"-"`
	XXX_unrecognized     []byte                                         `json:"-"`
	XXX_sizecache        int32                                          `json:"-"`
}

func (m *DeployManifestStage_TrafficManagement) Reset()         { *m = DeployManifestStage_TrafficManagement{} }
func (m *DeployManifestStage_TrafficManagement) String() string { return proto.CompactTextString(m) }
func (*DeployManifestStage_TrafficManagement) ProtoMessage()    {}
func (*DeployManifestStage_TrafficManagement) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a92368e03f1c791, []int{4, 0}
}
func (m *DeployManifestStage_TrafficManagement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeployManifestStage_TrafficManagement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeployManifestStage_TrafficManagement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeployManifestStage_TrafficManagement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployManifestStage_TrafficManagement.Merge(m, src)
}
func (m *DeployManifestStage_TrafficManagement) XXX_Size() int {
	return m.Size()
}
func (m *DeployManifestStage_TrafficManagement) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployManifestStage_TrafficManagement.DiscardUnknown(m)
}

var xxx_messageInfo_DeployManifestStage_TrafficManagement proto.InternalMessageInfo

func (m *DeployManifestStage_TrafficManagement) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *DeployManifestStage_TrafficManagement) GetOptions() *DeployManifestStage_TrafficManagement_Options {
	if m != nil {
		return m.Options
	}
	return nil
}

type DeployManifestStage_TrafficManagement_Options struct {
	EnableTraffic        bool     `protobuf:"varint,1,opt,name=enableTraffic,proto3" json:"enableTraffic,omitempty"`
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Services             []string `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
	Strategy             string   `protobuf:"bytes,4,opt,name=strategy,proto3" json:"strategy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeployManifestStage_TrafficManagement_Options) Reset() {
	*m = DeployManifestStage_TrafficManagement_Options{}
}
func (m *DeployManifestStage_TrafficManagement_Options) String() string {
	return proto.CompactTextString(m)
}
func (*DeployManifestStage_TrafficManagement_Options) ProtoMessage() {}
func (*DeployManifestStage_TrafficManagement_Options) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a92368e03f1c791, []int{4, 0, 0}
}
func (m *DeployManifestStage_TrafficManagement_Options) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeployManifestStage_TrafficManagement_Options) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeployManifestStage_TrafficManagement_Options.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeployManifestStage_TrafficManagement_Options) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeployManifestStage_TrafficManagement_Options.Merge(m, src)
}
func (m *DeployManifestStage_TrafficManagement_Options) XXX_Size() int {
	return m.Size()
}
func (m *DeployManifestStage_TrafficManagement_Options) XXX_DiscardUnknown() {
	xxx_messageInfo_DeployManifestStage_TrafficManagement_Options.DiscardUnknown(m)
}

var xxx_messageInfo_DeployManifestStage_TrafficManagement_Options proto.InternalMessageInfo

func (m *DeployManifestStage_TrafficManagement_Options) GetEnableTraffic() bool {
	if m != nil {
		return m.EnableTraffic
	}
	return false
}

func (m *DeployManifestStage_TrafficManagement_Options) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeployManifestStage_TrafficManagement_Options) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *DeployManifestStage_TrafficManagement_Options) GetStrategy() string {
	if m != nil {
		return m.Strategy
	}
	return ""
}

type BakeManifestStage struct {
	// common
	Type                              string                     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	RefId                             string                     `protobuf:"bytes,2,opt,name=refId,proto3" json:"refId,omitempty"`
	Name                              string                     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	RequisiteStageRefIds              []string                   `protobuf:"bytes,4,rep,name=requisiteStageRefIds,proto3" json:"requisiteStageRefIds,omitempty"`
	SendNotifications                 bool                       `protobuf:"varint,5,opt,name=sendNotifications,proto3" json:"sendNotifications,omitempty"`
	Notifications                     []*Notification            `protobuf:"bytes,6,rep,name=notifications,proto3" json:"notifications,omitempty"`
	StageTimeoutMs                    int32                      `protobuf:"varint,7,opt,name=stageTimeoutMs,proto3" json:"stageTimeoutMs,omitempty"`
	CompleteOtherBranchesThenFail     bool                       `protobuf:"varint,8,opt,name=completeOtherBranchesThenFail,proto3" json:"completeOtherBranchesThenFail,omitempty"`
	ContinuePipeline                  bool                       `protobuf:"varint,9,opt,name=continuePipeline,proto3" json:"continuePipeline,omitempty"`
	FailPipeline                      bool                       `protobuf:"varint,10,opt,name=failPipeline,proto3" json:"failPipeline,omitempty"`
	FailOnFailedExpressions           bool                       `protobuf:"varint,11,opt,name=failOnFailedExpressions,proto3" json:"failOnFailedExpressions,omitempty"`
	StageEnabled                      *StageEnabled              `protobuf:"bytes,12,opt,name=stageEnabled,proto3" json:"stageEnabled,omitempty"`
	RestrictExecutionDuringTimeWindow bool                       `protobuf:"varint,13,opt,name=restrictExecutionDuringTimeWindow,proto3" json:"restrictExecutionDuringTimeWindow,omitempty"`
	RestrictedExecutionWindow         *RestrictedExecutionWindow `protobuf:"bytes,14,opt,name=restrictedExecutionWindow,proto3" json:"restrictedExecutionWindow,omitempty"`
	SkipWindowText                    string                     `protobuf:"bytes,15,opt,name=skipWindowText,proto3" json:"skipWindowText,omitempty"`
	// fields
	TemplateRenderer     string              `protobuf:"bytes,101,opt,name=templateRenderer,proto3" json:"templateRenderer,omitempty"`
	OutputName           string              `protobuf:"bytes,102,opt,name=outputName,proto3" json:"outputName,omitempty"`
	Namespace            string              `protobuf:"bytes,103,opt,name=namespace,proto3" json:"namespace,omitempty"`
	InputArtifacts       []*InputArtifact    `protobuf:"bytes,104,rep,name=inputArtifacts,proto3" json:"inputArtifacts,omitempty"`
	Overrides            map[string]string   `protobuf:"bytes,105,rep,name=overrides,proto3" json:"overrides,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExpectedArtifacts    []*ExpectedArtifact `protobuf:"bytes,106,rep,name=expectedArtifacts,proto3" json:"expectedArtifacts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BakeManifestStage) Reset()         { *m = BakeManifestStage{} }
func (m *BakeManifestStage) String() string { return proto.CompactTextString(m) }
func (*BakeManifestStage) ProtoMessage()    {}
func (*BakeManifestStage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a92368e03f1c791, []int{5}
}
func (m *BakeManifestStage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BakeManifestStage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BakeManifestStage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BakeManifestStage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BakeManifestStage.Merge(m, src)
}
func (m *BakeManifestStage) XXX_Size() int {
	return m.Size()
}
func (m *BakeManifestStage) XXX_DiscardUnknown() {
	xxx_messageInfo_BakeManifestStage.DiscardUnknown(m)
}

var xxx_messageInfo_BakeManifestStage proto.InternalMessageInfo

func (m *BakeManifestStage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BakeManifestStage) GetRefId() string {
	if m != nil {
		return m.RefId
	}
	return ""
}

func (m *BakeManifestStage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BakeManifestStage) GetRequisiteStageRefIds() []string {
	if m != nil {
		return m.RequisiteStageRefIds
	}
	return nil
}

func (m *BakeManifestStage) GetSendNotifications() bool {
	if m != nil {
		return m.SendNotifications
	}
	return false
}

func (m *BakeManifestStage) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func (m *BakeManifestStage) GetStageTimeoutMs() int32 {
	if m != nil {
		return m.StageTimeoutMs
	}
	return 0
}

func (m *BakeManifestStage) GetCompleteOtherBranchesThenFail() bool {
	if m != nil {
		return m.CompleteOtherBranchesThenFail
	}
	return false
}

func (m *BakeManifestStage) GetContinuePipeline() bool {
	if m != nil {
		return m.ContinuePipeline
	}
	return false
}

func (m *BakeManifestStage) GetFailPipeline() bool {
	if m != nil {
		return m.FailPipeline
	}
	return false
}

func (m *BakeManifestStage) GetFailOnFailedExpressions() bool {
	if m != nil {
		return m.FailOnFailedExpressions
	}
	return false
}

func (m *BakeManifestStage) GetStageEnabled() *StageEnabled {
	if m != nil {
		return m.StageEnabled
	}
	return nil
}

func (m *BakeManifestStage) GetRestrictExecutionDuringTimeWindow() bool {
	if m != nil {
		return m.RestrictExecutionDuringTimeWindow
	}
	return false
}

func (m *BakeManifestStage) GetRestrictedExecutionWindow() *RestrictedExecutionWindow {
	if m != nil {
		return m.RestrictedExecutionWindow
	}
	return nil
}

func (m *BakeManifestStage) GetSkipWindowText() string {
	if m != nil {
		return m.SkipWindowText
	}
	return ""
}

func (m *BakeManifestStage) GetTemplateRenderer() string {
	if m != nil {
		return m.TemplateRenderer
	}
	return ""
}

func (m *BakeManifestStage) GetOutputName() string {
	if m != nil {
		return m.OutputName
	}
	return ""
}

func (m *BakeManifestStage) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *BakeManifestStage) GetInputArtifacts() []*InputArtifact {
	if m != nil {
		return m.InputArtifacts
	}
	return nil
}

func (m *BakeManifestStage) GetOverrides() map[string]string {
	if m != nil {
		return m.Overrides
	}
	return nil
}

func (m *BakeManifestStage) GetExpectedArtifacts() []*ExpectedArtifact {
	if m != nil {
		return m.ExpectedArtifacts
	}
	return nil
}

func init() {
	proto.RegisterType((*Stage)(nil), "spinnakerpb.Stage")
	proto.RegisterType((*StageEnabled)(nil), "spinnakerpb.StageEnabled")
	proto.RegisterType((*RestrictedExecutionWindow)(nil), "spinnakerpb.RestrictedExecutionWindow")
	proto.RegisterType((*RestrictedExecutionWindow_Jitter)(nil), "spinnakerpb.RestrictedExecutionWindow.Jitter")
	proto.RegisterType((*RestrictedExecutionWindow_Whitelist)(nil), "spinnakerpb.RestrictedExecutionWindow.Whitelist")
	proto.RegisterType((*ManualJudgmentStage)(nil), "spinnakerpb.ManualJudgmentStage")
	proto.RegisterType((*ManualJudgmentStage_JudgmentInput)(nil), "spinnakerpb.ManualJudgmentStage.JudgmentInput")
	proto.RegisterType((*DeployManifestStage)(nil), "spinnakerpb.DeployManifestStage")
	proto.RegisterType((*DeployManifestStage_TrafficManagement)(nil), "spinnakerpb.DeployManifestStage.TrafficManagement")
	proto.RegisterType((*DeployManifestStage_TrafficManagement_Options)(nil), "spinnakerpb.DeployManifestStage.TrafficManagement.Options")
	proto.RegisterType((*BakeManifestStage)(nil), "spinnakerpb.BakeManifestStage")
	proto.RegisterMapType((map[string]string)(nil), "spinnakerpb.BakeManifestStage.OverridesEntry")
}

func init() { proto.RegisterFile("stage.proto", fileDescriptor_8a92368e03f1c791) }

var fileDescriptor_8a92368e03f1c791 = []byte{
	// 1219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xc1, 0x6e, 0x1b, 0x37,
	0x13, 0xfe, 0x65, 0x5b, 0x56, 0x34, 0x96, 0xf5, 0xc7, 0x4c, 0xd0, 0x32, 0x42, 0x63, 0xb8, 0x42,
	0x1b, 0x18, 0x41, 0x23, 0x04, 0xee, 0x25, 0x08, 0x5a, 0x14, 0x71, 0xed, 0x20, 0x76, 0xea, 0x38,
	0x60, 0x8d, 0xe6, 0x5a, 0x7a, 0x77, 0x24, 0xd1, 0x5a, 0x71, 0xb7, 0x24, 0xd7, 0xb1, 0x7a, 0xef,
	0xa9, 0xe8, 0x13, 0xf5, 0x05, 0x7a, 0xec, 0x23, 0x14, 0x79, 0x80, 0x1e, 0x8a, 0x3e, 0x40, 0xc1,
	0xd9, 0x5d, 0x49, 0x2b, 0xc9, 0x71, 0xda, 0x6b, 0x7c, 0xdb, 0x99, 0xf9, 0xe6, 0x23, 0x77, 0x76,
	0x3e, 0x72, 0x24, 0x58, 0xb3, 0x4e, 0xf6, 0xb0, 0x93, 0x98, 0xd8, 0xc5, 0x6c, 0xcd, 0x26, 0x4a,
	0x6b, 0x39, 0x40, 0x93, 0x9c, 0xb6, 0x9a, 0xd2, 0x38, 0xd5, 0x95, 0x81, 0xcb, 0x82, 0x2d, 0xa6,
	0x63, 0xa7, 0xba, 0x2a, 0x90, 0x4e, 0xc5, 0x3a, 0xf3, 0xb5, 0xff, 0xac, 0x40, 0xf5, 0x5b, 0x4f,
	0xc0, 0x0e, 0xa1, 0x39, 0x94, 0x3a, 0x95, 0xd1, 0x61, 0x1a, 0xf6, 0x86, 0xa8, 0x1d, 0xaf, 0x6c,
	0x55, 0xb6, 0xd7, 0x76, 0xb6, 0x3a, 0x53, 0x9c, 0x9d, 0xa3, 0x12, 0x84, 0x32, 0x9f, 0xfd, 0x4f,
	0xcc, 0x64, 0x7a, 0xae, 0x10, 0x93, 0x28, 0x1e, 0x1d, 0x49, 0xad, 0xba, 0x68, 0x1d, 0x5f, 0x5a,
	0xc0, 0xb5, 0x57, 0x82, 0x8c, 0xb9, 0xca, 0x99, 0x6c, 0x0f, 0x1a, 0xa7, 0x72, 0x80, 0x63, 0xa6,
	0x65, 0x62, 0xda, 0x2c, 0x31, 0xed, 0x4e, 0x01, 0x0a, 0x9e, 0x52, 0xd6, 0x6e, 0x0d, 0xaa, 0x54,
	0xa7, 0xf6, 0x2e, 0x34, 0x08, 0xb1, 0xaf, 0xe5, 0x69, 0x84, 0x21, 0x63, 0xb0, 0xe2, 0x46, 0x09,
	0xd2, 0xcb, 0xd6, 0x05, 0x3d, 0xb3, 0x4d, 0x00, 0xbc, 0x48, 0x0c, 0x5a, 0xab, 0x62, 0x4d, 0x5b,
	0xaf, 0x8b, 0x29, 0x4f, 0xfb, 0xd7, 0x65, 0xb8, 0x23, 0xd0, 0x3a, 0xa3, 0x02, 0x87, 0xe1, 0xfe,
	0x05, 0x06, 0xa9, 0x2f, 0xe9, 0x2b, 0xa5, 0xc3, 0xf8, 0xb5, 0x67, 0x0c, 0xe5, 0xc8, 0xf2, 0xca,
	0xd6, 0xf2, 0x76, 0x55, 0xd0, 0x33, 0xdb, 0x87, 0xd5, 0x33, 0xe5, 0x1c, 0x9a, 0xbc, 0x10, 0x0f,
	0x4a, 0xdb, 0xbf, 0x94, 0xab, 0x73, 0x48, 0x49, 0x22, 0x4f, 0x66, 0x2f, 0xa0, 0xfe, 0xba, 0xaf,
	0x1c, 0x46, 0x8a, 0x0a, 0xb1, 0xbc, 0xbd, 0xb6, 0xf3, 0xf0, 0x1d, 0x99, 0x5e, 0x15, 0x79, 0x62,
	0x42, 0xd1, 0xfa, 0x11, 0x56, 0xb3, 0x15, 0x18, 0x87, 0x1a, 0x66, 0x15, 0xa1, 0x4a, 0xdc, 0x10,
	0x85, 0xc9, 0x5a, 0x70, 0x63, 0x28, 0x2f, 0xf6, 0x30, 0x92, 0x23, 0xda, 0x7c, 0x55, 0x8c, 0x6d,
	0x8a, 0x29, 0x9d, 0xc5, 0x96, 0xf3, 0x58, 0x6e, 0xfb, 0x22, 0xda, 0x81, 0x4a, 0xb2, 0x86, 0xe1,
	0x2b, 0x44, 0x3a, 0xe5, 0x69, 0xbd, 0x86, 0xfa, 0x78, 0x4f, 0xd9, 0xf2, 0xe1, 0xb3, 0x38, 0x35,
	0xb4, 0x7c, 0x55, 0x14, 0x26, 0xfb, 0x00, 0x56, 0x51, 0x87, 0x47, 0x4a, 0xe7, 0x8b, 0xe7, 0x16,
	0xfb, 0x08, 0xea, 0xd6, 0x49, 0xe3, 0x28, 0x27, 0x5b, 0x7b, 0xe2, 0xf0, 0x1b, 0x23, 0xc3, 0xe7,
	0xad, 0x64, 0x1b, 0x2b, 0xec, 0xf6, 0xdf, 0x35, 0xb8, 0xb5, 0xa0, 0x8d, 0x17, 0x76, 0xc2, 0x6d,
	0xa8, 0x1a, 0xec, 0x1e, 0x84, 0x79, 0x13, 0x64, 0x86, 0x47, 0x6a, 0x39, 0x44, 0x5a, 0xb6, 0x2e,
	0xe8, 0x99, 0xed, 0xc0, 0x6d, 0x83, 0x3f, 0xa4, 0xca, 0x2a, 0x87, 0xc4, 0x27, 0x3c, 0xd4, 0xf2,
	0x95, 0xad, 0xe5, 0xed, 0xba, 0x58, 0x18, 0x63, 0x9f, 0xc1, 0x86, 0x45, 0x1d, 0xbe, 0x98, 0x92,
	0xa5, 0xe5, 0x55, 0xaa, 0xd4, 0x7c, 0x80, 0x7d, 0x05, 0xeb, 0xba, 0x84, 0x5c, 0xa5, 0x06, 0xb8,
	0x53, 0x6a, 0x80, 0xe9, 0x14, 0x51, 0xc6, 0xb3, 0x7b, 0xd0, 0x24, 0x0d, 0x9c, 0xa8, 0x21, 0xc6,
	0xa9, 0x3b, 0xb2, 0xbc, 0x46, 0xa5, 0x99, 0xf1, 0xb2, 0x3d, 0xb8, 0x1b, 0xc4, 0xc3, 0x24, 0x42,
	0x87, 0xc7, 0xae, 0x8f, 0x66, 0xd7, 0x48, 0x1d, 0xf4, 0xd1, 0x9e, 0xf4, 0x51, 0x3f, 0x95, 0x2a,
	0xe2, 0x37, 0x68, 0x8b, 0x6f, 0x07, 0xb1, 0xfb, 0x70, 0x33, 0x88, 0xb5, 0x53, 0x3a, 0xc5, 0x97,
	0x2a, 0xc1, 0x48, 0x69, 0xe4, 0x75, 0x4a, 0x9c, 0xf3, 0xb3, 0x36, 0x34, 0xba, 0x52, 0x45, 0x63,
	0x1c, 0x10, 0xae, 0xe4, 0x63, 0x8f, 0xe0, 0x43, 0x6f, 0x1f, 0x13, 0xbb, 0xef, 0xef, 0x42, 0x8e,
	0x96, 0xaf, 0x11, 0xfc, 0xb2, 0x30, 0xfb, 0x12, 0x1a, 0x76, 0x4a, 0xf2, 0xbc, 0x41, 0x12, 0x2c,
	0xd7, 0x6d, 0xfa, 0x4c, 0x10, 0x25, 0x38, 0xfb, 0x06, 0x3e, 0x36, 0xb9, 0xac, 0xc6, 0xa2, 0xda,
	0x4b, 0x8d, 0xd2, 0x3d, 0x5f, 0xb2, 0x4c, 0x5e, 0x7c, 0x9d, 0xb6, 0x70, 0x35, 0x90, 0x85, 0x70,
	0xc7, 0x5c, 0x26, 0x52, 0xde, 0xa4, 0x9d, 0xdd, 0x7b, 0x37, 0x49, 0x8b, 0xcb, 0x89, 0xe8, 0x53,
	0x0f, 0x54, 0x92, 0x59, 0x27, 0x78, 0xe1, 0xf8, 0xff, 0xa9, 0x57, 0x67, 0xbc, 0xbe, 0xf0, 0x4a,
	0x5b, 0x67, 0xd2, 0x20, 0x6b, 0x29, 0x24, 0x54, 0xc9, 0xc7, 0x9e, 0xc2, 0x66, 0x62, 0xe2, 0x44,
	0xf6, 0xa4, 0xc3, 0x27, 0xa9, 0xeb, 0xa3, 0x76, 0x79, 0x4b, 0x7d, 0x1d, 0x6b, 0xe7, 0xb9, 0xbb,
	0xf4, 0xf2, 0x57, 0xa0, 0xd8, 0x77, 0xd0, 0x3c, 0xcb, 0x05, 0x77, 0xa0, 0x93, 0xd4, 0x59, 0xde,
	0xa3, 0x06, 0xee, 0x5c, 0x75, 0xc1, 0x74, 0x0e, 0xa7, 0xd3, 0xc4, 0x0c, 0x4b, 0xeb, 0x53, 0x58,
	0x2f, 0x01, 0xbc, 0x68, 0xcf, 0x65, 0x94, 0x16, 0x4a, 0xce, 0x8c, 0xf6, 0x5f, 0x0d, 0xb8, 0xb5,
	0xe0, 0xc6, 0xb9, 0x96, 0xfd, 0xb5, 0xec, 0xdf, 0x3b, 0xd9, 0x73, 0xa8, 0xc9, 0x20, 0x88, 0x53,
	0xed, 0x72, 0xc5, 0x17, 0x26, 0xfb, 0x04, 0xd6, 0x83, 0x28, 0x4e, 0xc3, 0x97, 0x26, 0x3e, 0x57,
	0x21, 0x1a, 0xd2, 0x76, 0x5d, 0x94, 0x9d, 0xac, 0x03, 0xb5, 0x61, 0xac, 0xd5, 0x00, 0x0d, 0xef,
	0xd1, 0xde, 0x6f, 0x97, 0x35, 0x9c, 0xc5, 0x44, 0x01, 0xf2, 0x1d, 0xef, 0xd5, 0x62, 0x13, 0x19,
	0xe0, 0xf1, 0x39, 0x1a, 0xa3, 0x42, 0xe4, 0x7d, 0x62, 0x9e, 0x0f, 0xf8, 0x2b, 0xdf, 0xc6, 0xa9,
	0x09, 0x90, 0x2b, 0x82, 0xe4, 0x96, 0x6f, 0x85, 0x61, 0x2e, 0xdd, 0x27, 0xf9, 0x64, 0xfb, 0x24,
	0x7f, 0x8b, 0x33, 0x02, 0x5e, 0x16, 0x66, 0x1d, 0x60, 0xb3, 0xa1, 0x83, 0x90, 0x0f, 0x28, 0x69,
	0x41, 0x84, 0x3d, 0x06, 0xee, 0x2b, 0x36, 0xe9, 0xa6, 0x7d, 0x7f, 0x86, 0x90, 0x9e, 0x78, 0x44,
	0x9f, 0xfc, 0xd2, 0xb8, 0x1f, 0x4c, 0x0a, 0x46, 0xcb, 0x87, 0x74, 0x0c, 0x4c, 0x1c, 0xec, 0x21,
	0xdc, 0xa2, 0x33, 0xc1, 0x60, 0x38, 0x59, 0xcf, 0x72, 0x4d, 0xb8, 0x45, 0x21, 0xf6, 0x3d, 0x6c,
	0x38, 0x23, 0xbb, 0x5d, 0x15, 0x1c, 0x49, 0x2d, 0x7b, 0x48, 0xa3, 0x79, 0x4c, 0x55, 0xdf, 0xb9,
	0x6a, 0x9c, 0xee, 0x9c, 0xcc, 0x66, 0x8a, 0x79, 0x32, 0xf6, 0x1c, 0x36, 0xf0, 0x22, 0x41, 0xdf,
	0x50, 0xc5, 0xc2, 0x96, 0x27, 0x74, 0xca, 0xdc, 0x2d, 0xad, 0xb0, 0x3f, 0x83, 0x12, 0xf3, 0x79,
	0xad, 0x9f, 0x97, 0x60, 0x63, 0x6e, 0xd5, 0xb7, 0x8c, 0x97, 0x27, 0x50, 0x8b, 0x93, 0xec, 0x60,
	0xcb, 0x46, 0xe3, 0xc7, 0xff, 0xfe, 0xa5, 0x3a, 0xc7, 0x19, 0x83, 0x28, 0xa8, 0x5a, 0x3f, 0x55,
	0xa0, 0x96, 0x3b, 0x7d, 0x4b, 0x67, 0x8b, 0xe5, 0x79, 0xf9, 0x0e, 0xca, 0x4e, 0xff, 0xd9, 0xc6,
	0x9d, 0x98, 0x1f, 0xfb, 0x13, 0x07, 0xcd, 0x93, 0x68, 0xce, 0x55, 0x80, 0x96, 0xe6, 0xee, 0xba,
	0x18, 0xdb, 0xd9, 0xac, 0x69, 0xa4, 0xc3, 0xde, 0x88, 0x66, 0x4d, 0x1f, 0xcb, 0xed, 0xf6, 0x2f,
	0x75, 0xd8, 0x98, 0xfb, 0x71, 0x72, 0x7d, 0xe5, 0x5c, 0x5f, 0x39, 0xef, 0xdd, 0x95, 0x73, 0x1f,
	0x6e, 0x3a, 0x1c, 0x26, 0x91, 0x74, 0x28, 0x50, 0x87, 0x68, 0xd0, 0xe4, 0x77, 0xcf, 0x9c, 0xdf,
	0xff, 0x74, 0x8c, 0x53, 0x97, 0xa4, 0xee, 0x85, 0xef, 0xfd, 0xec, 0x06, 0x9a, 0xf2, 0x94, 0xb5,
	0xda, 0x9b, 0xd5, 0xea, 0x2e, 0x34, 0x95, 0x9f, 0x03, 0x27, 0x67, 0x59, 0x9f, 0xda, 0xb7, 0x55,
	0x7a, 0xd9, 0x83, 0x69, 0x88, 0x98, 0xc9, 0x60, 0xcf, 0xa1, 0x1e, 0xe7, 0xd7, 0x91, 0xe5, 0x8a,
	0xd2, 0x1f, 0xbc, 0xfd, 0x1f, 0x87, 0x4e, 0x71, 0x7d, 0xd9, 0x7d, 0xed, 0xcc, 0x48, 0x4c, 0xf2,
	0x17, 0x9f, 0xaf, 0x67, 0xff, 0xf1, 0x7c, 0xfd, 0x02, 0x9a, 0xe5, 0x95, 0xd8, 0x4d, 0x58, 0x1e,
	0xe0, 0x28, 0x3f, 0x4c, 0xfc, 0xe3, 0x64, 0x00, 0x5e, 0x9a, 0x1a, 0x80, 0x1f, 0x2f, 0x3d, 0xaa,
	0xec, 0x36, 0x7e, 0x7b, 0xb3, 0x59, 0xf9, 0xfd, 0xcd, 0x66, 0xe5, 0x8f, 0x37, 0x9b, 0x95, 0xd3,
	0x55, 0xfa, 0x0f, 0xe8, 0xf3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x70, 0x5f, 0x60, 0x43,
	0x12, 0x00, 0x00,
}

func (m *Stage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Stage != nil {
		{
			size := m.Stage.Size()
			i -= size
			if _, err := m.Stage.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Stage_ManualJudgment) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Stage_ManualJudgment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ManualJudgment != nil {
		{
			size, err := m.ManualJudgment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Stage_DeployManifest) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Stage_DeployManifest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DeployManifest != nil {
		{
			size, err := m.DeployManifest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Stage_BakeManifest) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *Stage_BakeManifest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BakeManifest != nil {
		{
			size, err := m.BakeManifest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *StageEnabled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageEnabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StageEnabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Expression) > 0 {
		i -= len(m.Expression)
		copy(dAtA[i:], m.Expression)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Expression)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestrictedExecutionWindow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestrictedExecutionWindow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestrictedExecutionWindow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Whitelist) > 0 {
		for iNdEx := len(m.Whitelist) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Whitelist[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Jitter != nil {
		{
			size, err := m.Jitter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Days) > 0 {
		dAtA6 := make([]byte, len(m.Days)*10)
		var j5 int
		for _, num1 := range m.Days {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintStage(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RestrictedExecutionWindow_Jitter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestrictedExecutionWindow_Jitter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestrictedExecutionWindow_Jitter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SkipManual {
		i--
		if m.SkipManual {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.MinDelay != 0 {
		i = encodeVarintStage(dAtA, i, uint64(m.MinDelay))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxDelay != 0 {
		i = encodeVarintStage(dAtA, i, uint64(m.MaxDelay))
		i--
		dAtA[i] = 0x10
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RestrictedExecutionWindow_Whitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestrictedExecutionWindow_Whitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestrictedExecutionWindow_Whitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StartMin != 0 {
		i = encodeVarintStage(dAtA, i, uint64(m.StartMin))
		i--
		dAtA[i] = 0x20
	}
	if m.StartHour != 0 {
		i = encodeVarintStage(dAtA, i, uint64(m.StartHour))
		i--
		dAtA[i] = 0x18
	}
	if m.EndMin != 0 {
		i = encodeVarintStage(dAtA, i, uint64(m.EndMin))
		i--
		dAtA[i] = 0x10
	}
	if m.EndHour != 0 {
		i = encodeVarintStage(dAtA, i, uint64(m.EndHour))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ManualJudgmentStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManualJudgmentStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManualJudgmentStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JudgmentInputs) > 0 {
		for iNdEx := len(m.JudgmentInputs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JudgmentInputs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xba
		}
	}
	if m.PropagateAuthenticationContext {
		i--
		if m.PropagateAuthenticationContext {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb0
	}
	if len(m.Instructions) > 0 {
		i -= len(m.Instructions)
		copy(dAtA[i:], m.Instructions)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Instructions)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.SkipWindowText) > 0 {
		i -= len(m.SkipWindowText)
		copy(dAtA[i:], m.SkipWindowText)
		i = encodeVarintStage(dAtA, i, uint64(len(m.SkipWindowText)))
		i--
		dAtA[i] = 0x7a
	}
	if m.RestrictedExecutionWindow != nil {
		{
			size, err := m.RestrictedExecutionWindow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.RestrictExecutionDuringTimeWindow {
		i--
		if m.RestrictExecutionDuringTimeWindow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.StageEnabled != nil {
		{
			size, err := m.StageEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.FailOnFailedExpressions {
		i--
		if m.FailOnFailedExpressions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.FailPipeline {
		i--
		if m.FailPipeline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.ContinuePipeline {
		i--
		if m.ContinuePipeline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.CompleteOtherBranchesThenFail {
		i--
		if m.CompleteOtherBranchesThenFail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.StageTimeoutMs != 0 {
		i = encodeVarintStage(dAtA, i, uint64(m.StageTimeoutMs))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.SendNotifications {
		i--
		if m.SendNotifications {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.RequisiteStageRefIds) > 0 {
		for iNdEx := len(m.RequisiteStageRefIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequisiteStageRefIds[iNdEx])
			copy(dAtA[i:], m.RequisiteStageRefIds[iNdEx])
			i = encodeVarintStage(dAtA, i, uint64(len(m.RequisiteStageRefIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintStage(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ManualJudgmentStage_JudgmentInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManualJudgmentStage_JudgmentInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManualJudgmentStage_JudgmentInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeployManifestStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeployManifestStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeployManifestStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExpectedArtifacts) > 0 {
		for iNdEx := len(m.ExpectedArtifacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpectedArtifacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7
			i--
			dAtA[i] = 0x82
		}
	}
	if m.TrafficManagement != nil {
		{
			size, err := m.TrafficManagement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xfa
	}
	if len(m.RequiredArtifactIds) > 0 {
		for iNdEx := len(m.RequiredArtifactIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequiredArtifactIds[iNdEx])
			copy(dAtA[i:], m.RequiredArtifactIds[iNdEx])
			i = encodeVarintStage(dAtA, i, uint64(len(m.RequiredArtifactIds[iNdEx])))
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xf2
		}
	}
	if len(m.Manifests) > 0 {
		for iNdEx := len(m.Manifests) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Manifests[iNdEx])
			copy(dAtA[i:], m.Manifests[iNdEx])
			i = encodeVarintStage(dAtA, i, uint64(len(m.Manifests[iNdEx])))
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xea
		}
	}
	if m.SkipExpressionEvaluation {
		i--
		if m.SkipExpressionEvaluation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xe0
	}
	if len(m.ManifestArtifactId) > 0 {
		i -= len(m.ManifestArtifactId)
		copy(dAtA[i:], m.ManifestArtifactId)
		i = encodeVarintStage(dAtA, i, uint64(len(m.ManifestArtifactId)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xda
	}
	if len(m.ManifestArtifactAccount) > 0 {
		i -= len(m.ManifestArtifactAccount)
		copy(dAtA[i:], m.ManifestArtifactAccount)
		i = encodeVarintStage(dAtA, i, uint64(len(m.ManifestArtifactAccount)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xd2
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xca
	}
	if len(m.NamespaceOverride) > 0 {
		i -= len(m.NamespaceOverride)
		copy(dAtA[i:], m.NamespaceOverride)
		i = encodeVarintStage(dAtA, i, uint64(len(m.NamespaceOverride)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xc2
	}
	if m.Moniker != nil {
		{
			size, err := m.Moniker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.CloudProvider) > 0 {
		i -= len(m.CloudProvider)
		copy(dAtA[i:], m.CloudProvider)
		i = encodeVarintStage(dAtA, i, uint64(len(m.CloudProvider)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.SkipWindowText) > 0 {
		i -= len(m.SkipWindowText)
		copy(dAtA[i:], m.SkipWindowText)
		i = encodeVarintStage(dAtA, i, uint64(len(m.SkipWindowText)))
		i--
		dAtA[i] = 0x7a
	}
	if m.RestrictedExecutionWindow != nil {
		{
			size, err := m.RestrictedExecutionWindow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.RestrictExecutionDuringTimeWindow {
		i--
		if m.RestrictExecutionDuringTimeWindow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.StageEnabled != nil {
		{
			size, err := m.StageEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.FailOnFailedExpressions {
		i--
		if m.FailOnFailedExpressions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.FailPipeline {
		i--
		if m.FailPipeline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.ContinuePipeline {
		i--
		if m.ContinuePipeline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.CompleteOtherBranchesThenFail {
		i--
		if m.CompleteOtherBranchesThenFail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.StageTimeoutMs != 0 {
		i = encodeVarintStage(dAtA, i, uint64(m.StageTimeoutMs))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.SendNotifications {
		i--
		if m.SendNotifications {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.RequisiteStageRefIds) > 0 {
		for iNdEx := len(m.RequisiteStageRefIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequisiteStageRefIds[iNdEx])
			copy(dAtA[i:], m.RequisiteStageRefIds[iNdEx])
			i = encodeVarintStage(dAtA, i, uint64(len(m.RequisiteStageRefIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintStage(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeployManifestStage_TrafficManagement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeployManifestStage_TrafficManagement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeployManifestStage_TrafficManagement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeployManifestStage_TrafficManagement_Options) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeployManifestStage_TrafficManagement_Options) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeployManifestStage_TrafficManagement_Options) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Strategy) > 0 {
		i -= len(m.Strategy)
		copy(dAtA[i:], m.Strategy)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Strategy)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Services[iNdEx])
			copy(dAtA[i:], m.Services[iNdEx])
			i = encodeVarintStage(dAtA, i, uint64(len(m.Services[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.EnableTraffic {
		i--
		if m.EnableTraffic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BakeManifestStage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BakeManifestStage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BakeManifestStage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ExpectedArtifacts) > 0 {
		for iNdEx := len(m.ExpectedArtifacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExpectedArtifacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xd2
		}
	}
	if len(m.Overrides) > 0 {
		for k := range m.Overrides {
			v := m.Overrides[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintStage(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStage(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStage(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xca
		}
	}
	if len(m.InputArtifacts) > 0 {
		for iNdEx := len(m.InputArtifacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InputArtifacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xba
	}
	if len(m.OutputName) > 0 {
		i -= len(m.OutputName)
		copy(dAtA[i:], m.OutputName)
		i = encodeVarintStage(dAtA, i, uint64(len(m.OutputName)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xb2
	}
	if len(m.TemplateRenderer) > 0 {
		i -= len(m.TemplateRenderer)
		copy(dAtA[i:], m.TemplateRenderer)
		i = encodeVarintStage(dAtA, i, uint64(len(m.TemplateRenderer)))
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xaa
	}
	if len(m.SkipWindowText) > 0 {
		i -= len(m.SkipWindowText)
		copy(dAtA[i:], m.SkipWindowText)
		i = encodeVarintStage(dAtA, i, uint64(len(m.SkipWindowText)))
		i--
		dAtA[i] = 0x7a
	}
	if m.RestrictedExecutionWindow != nil {
		{
			size, err := m.RestrictedExecutionWindow.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.RestrictExecutionDuringTimeWindow {
		i--
		if m.RestrictExecutionDuringTimeWindow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.StageEnabled != nil {
		{
			size, err := m.StageEnabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.FailOnFailedExpressions {
		i--
		if m.FailOnFailedExpressions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.FailPipeline {
		i--
		if m.FailPipeline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.ContinuePipeline {
		i--
		if m.ContinuePipeline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.CompleteOtherBranchesThenFail {
		i--
		if m.CompleteOtherBranchesThenFail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.StageTimeoutMs != 0 {
		i = encodeVarintStage(dAtA, i, uint64(m.StageTimeoutMs))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.SendNotifications {
		i--
		if m.SendNotifications {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.RequisiteStageRefIds) > 0 {
		for iNdEx := len(m.RequisiteStageRefIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RequisiteStageRefIds[iNdEx])
			copy(dAtA[i:], m.RequisiteStageRefIds[iNdEx])
			i = encodeVarintStage(dAtA, i, uint64(len(m.RequisiteStageRefIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RefId) > 0 {
		i -= len(m.RefId)
		copy(dAtA[i:], m.RefId)
		i = encodeVarintStage(dAtA, i, uint64(len(m.RefId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintStage(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStage(dAtA []byte, offset int, v uint64) int {
	offset -= sovStage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Stage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stage != nil {
		n += m.Stage.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Stage_ManualJudgment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ManualJudgment != nil {
		l = m.ManualJudgment.Size()
		n += 1 + l + sovStage(uint64(l))
	}
	return n
}
func (m *Stage_DeployManifest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeployManifest != nil {
		l = m.DeployManifest.Size()
		n += 1 + l + sovStage(uint64(l))
	}
	return n
}
func (m *Stage_BakeManifest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BakeManifest != nil {
		l = m.BakeManifest.Size()
		n += 1 + l + sovStage(uint64(l))
	}
	return n
}
func (m *StageEnabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	l = len(m.Expression)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RestrictedExecutionWindow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Days) > 0 {
		l = 0
		for _, e := range m.Days {
			l += sovStage(uint64(e))
		}
		n += 1 + sovStage(uint64(l)) + l
	}
	if m.Jitter != nil {
		l = m.Jitter.Size()
		n += 1 + l + sovStage(uint64(l))
	}
	if len(m.Whitelist) > 0 {
		for _, e := range m.Whitelist {
			l = e.Size()
			n += 1 + l + sovStage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RestrictedExecutionWindow_Jitter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.MaxDelay != 0 {
		n += 1 + sovStage(uint64(m.MaxDelay))
	}
	if m.MinDelay != 0 {
		n += 1 + sovStage(uint64(m.MinDelay))
	}
	if m.SkipManual {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RestrictedExecutionWindow_Whitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndHour != 0 {
		n += 1 + sovStage(uint64(m.EndHour))
	}
	if m.EndMin != 0 {
		n += 1 + sovStage(uint64(m.EndMin))
	}
	if m.StartHour != 0 {
		n += 1 + sovStage(uint64(m.StartHour))
	}
	if m.StartMin != 0 {
		n += 1 + sovStage(uint64(m.StartMin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManualJudgmentStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	if len(m.RequisiteStageRefIds) > 0 {
		for _, s := range m.RequisiteStageRefIds {
			l = len(s)
			n += 1 + l + sovStage(uint64(l))
		}
	}
	if m.SendNotifications {
		n += 2
	}
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 1 + l + sovStage(uint64(l))
		}
	}
	if m.StageTimeoutMs != 0 {
		n += 1 + sovStage(uint64(m.StageTimeoutMs))
	}
	if m.CompleteOtherBranchesThenFail {
		n += 2
	}
	if m.ContinuePipeline {
		n += 2
	}
	if m.FailPipeline {
		n += 2
	}
	if m.FailOnFailedExpressions {
		n += 2
	}
	if m.StageEnabled != nil {
		l = m.StageEnabled.Size()
		n += 1 + l + sovStage(uint64(l))
	}
	if m.RestrictExecutionDuringTimeWindow {
		n += 2
	}
	if m.RestrictedExecutionWindow != nil {
		l = m.RestrictedExecutionWindow.Size()
		n += 1 + l + sovStage(uint64(l))
	}
	l = len(m.SkipWindowText)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	l = len(m.Instructions)
	if l > 0 {
		n += 2 + l + sovStage(uint64(l))
	}
	if m.PropagateAuthenticationContext {
		n += 3
	}
	if len(m.JudgmentInputs) > 0 {
		for _, e := range m.JudgmentInputs {
			l = e.Size()
			n += 2 + l + sovStage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManualJudgmentStage_JudgmentInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeployManifestStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	if len(m.RequisiteStageRefIds) > 0 {
		for _, s := range m.RequisiteStageRefIds {
			l = len(s)
			n += 1 + l + sovStage(uint64(l))
		}
	}
	if m.SendNotifications {
		n += 2
	}
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 1 + l + sovStage(uint64(l))
		}
	}
	if m.StageTimeoutMs != 0 {
		n += 1 + sovStage(uint64(m.StageTimeoutMs))
	}
	if m.CompleteOtherBranchesThenFail {
		n += 2
	}
	if m.ContinuePipeline {
		n += 2
	}
	if m.FailPipeline {
		n += 2
	}
	if m.FailOnFailedExpressions {
		n += 2
	}
	if m.StageEnabled != nil {
		l = m.StageEnabled.Size()
		n += 1 + l + sovStage(uint64(l))
	}
	if m.RestrictExecutionDuringTimeWindow {
		n += 2
	}
	if m.RestrictedExecutionWindow != nil {
		l = m.RestrictedExecutionWindow.Size()
		n += 1 + l + sovStage(uint64(l))
	}
	l = len(m.SkipWindowText)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 2 + l + sovStage(uint64(l))
	}
	l = len(m.CloudProvider)
	if l > 0 {
		n += 2 + l + sovStage(uint64(l))
	}
	if m.Moniker != nil {
		l = m.Moniker.Size()
		n += 2 + l + sovStage(uint64(l))
	}
	l = len(m.NamespaceOverride)
	if l > 0 {
		n += 2 + l + sovStage(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 2 + l + sovStage(uint64(l))
	}
	l = len(m.ManifestArtifactAccount)
	if l > 0 {
		n += 2 + l + sovStage(uint64(l))
	}
	l = len(m.ManifestArtifactId)
	if l > 0 {
		n += 2 + l + sovStage(uint64(l))
	}
	if m.SkipExpressionEvaluation {
		n += 3
	}
	if len(m.Manifests) > 0 {
		for _, s := range m.Manifests {
			l = len(s)
			n += 2 + l + sovStage(uint64(l))
		}
	}
	if len(m.RequiredArtifactIds) > 0 {
		for _, s := range m.RequiredArtifactIds {
			l = len(s)
			n += 2 + l + sovStage(uint64(l))
		}
	}
	if m.TrafficManagement != nil {
		l = m.TrafficManagement.Size()
		n += 2 + l + sovStage(uint64(l))
	}
	if len(m.ExpectedArtifacts) > 0 {
		for _, e := range m.ExpectedArtifacts {
			l = e.Size()
			n += 2 + l + sovStage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeployManifestStage_TrafficManagement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovStage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeployManifestStage_TrafficManagement_Options) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnableTraffic {
		n += 2
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	if len(m.Services) > 0 {
		for _, s := range m.Services {
			l = len(s)
			n += 1 + l + sovStage(uint64(l))
		}
	}
	l = len(m.Strategy)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BakeManifestStage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	l = len(m.RefId)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	if len(m.RequisiteStageRefIds) > 0 {
		for _, s := range m.RequisiteStageRefIds {
			l = len(s)
			n += 1 + l + sovStage(uint64(l))
		}
	}
	if m.SendNotifications {
		n += 2
	}
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 1 + l + sovStage(uint64(l))
		}
	}
	if m.StageTimeoutMs != 0 {
		n += 1 + sovStage(uint64(m.StageTimeoutMs))
	}
	if m.CompleteOtherBranchesThenFail {
		n += 2
	}
	if m.ContinuePipeline {
		n += 2
	}
	if m.FailPipeline {
		n += 2
	}
	if m.FailOnFailedExpressions {
		n += 2
	}
	if m.StageEnabled != nil {
		l = m.StageEnabled.Size()
		n += 1 + l + sovStage(uint64(l))
	}
	if m.RestrictExecutionDuringTimeWindow {
		n += 2
	}
	if m.RestrictedExecutionWindow != nil {
		l = m.RestrictedExecutionWindow.Size()
		n += 1 + l + sovStage(uint64(l))
	}
	l = len(m.SkipWindowText)
	if l > 0 {
		n += 1 + l + sovStage(uint64(l))
	}
	l = len(m.TemplateRenderer)
	if l > 0 {
		n += 2 + l + sovStage(uint64(l))
	}
	l = len(m.OutputName)
	if l > 0 {
		n += 2 + l + sovStage(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 2 + l + sovStage(uint64(l))
	}
	if len(m.InputArtifacts) > 0 {
		for _, e := range m.InputArtifacts {
			l = e.Size()
			n += 2 + l + sovStage(uint64(l))
		}
	}
	if len(m.Overrides) > 0 {
		for k, v := range m.Overrides {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStage(uint64(len(k))) + 1 + len(v) + sovStage(uint64(len(v)))
			n += mapEntrySize + 2 + sovStage(uint64(mapEntrySize))
		}
	}
	if len(m.ExpectedArtifacts) > 0 {
		for _, e := range m.ExpectedArtifacts {
			l = e.Size()
			n += 2 + l + sovStage(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStage(x uint64) (n int) {
	return sovStage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Stage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManualJudgment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ManualJudgmentStage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Stage = &Stage_ManualJudgment{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeployManifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeployManifestStage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Stage = &Stage_DeployManifest{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BakeManifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BakeManifestStage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Stage = &Stage_BakeManifest{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StageEnabled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageEnabled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageEnabled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expression", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expression = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestrictedExecutionWindow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestrictedExecutionWindow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestrictedExecutionWindow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Days = append(m.Days, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStage
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStage
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Days) == 0 {
					m.Days = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Days = append(m.Days, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jitter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Jitter == nil {
				m.Jitter = &RestrictedExecutionWindow_Jitter{}
			}
			if err := m.Jitter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Whitelist = append(m.Whitelist, &RestrictedExecutionWindow_Whitelist{})
			if err := m.Whitelist[len(m.Whitelist)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestrictedExecutionWindow_Jitter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Jitter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Jitter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelay", wireType)
			}
			m.MaxDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDelay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDelay", wireType)
			}
			m.MinDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDelay |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipManual", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipManual = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RestrictedExecutionWindow_Whitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Whitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Whitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHour", wireType)
			}
			m.EndHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHour |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndMin", wireType)
			}
			m.EndMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndMin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHour", wireType)
			}
			m.StartHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHour |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartMin", wireType)
			}
			m.StartMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartMin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManualJudgmentStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManualJudgmentStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManualJudgmentStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequisiteStageRefIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequisiteStageRefIds = append(m.RequisiteStageRefIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendNotifications", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendNotifications = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageTimeoutMs", wireType)
			}
			m.StageTimeoutMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageTimeoutMs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteOtherBranchesThenFail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteOtherBranchesThenFail = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuePipeline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContinuePipeline = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailPipeline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailPipeline = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailOnFailedExpressions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailOnFailedExpressions = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StageEnabled == nil {
				m.StageEnabled = &StageEnabled{}
			}
			if err := m.StageEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictExecutionDuringTimeWindow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestrictExecutionDuringTimeWindow = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictedExecutionWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RestrictedExecutionWindow == nil {
				m.RestrictedExecutionWindow = &RestrictedExecutionWindow{}
			}
			if err := m.RestrictedExecutionWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipWindowText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkipWindowText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instructions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropagateAuthenticationContext", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PropagateAuthenticationContext = bool(v != 0)
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgmentInputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JudgmentInputs = append(m.JudgmentInputs, &ManualJudgmentStage_JudgmentInput{})
			if err := m.JudgmentInputs[len(m.JudgmentInputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManualJudgmentStage_JudgmentInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JudgmentInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JudgmentInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployManifestStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeployManifestStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeployManifestStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequisiteStageRefIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequisiteStageRefIds = append(m.RequisiteStageRefIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendNotifications", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendNotifications = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageTimeoutMs", wireType)
			}
			m.StageTimeoutMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageTimeoutMs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteOtherBranchesThenFail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteOtherBranchesThenFail = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuePipeline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContinuePipeline = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailPipeline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailPipeline = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailOnFailedExpressions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailOnFailedExpressions = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StageEnabled == nil {
				m.StageEnabled = &StageEnabled{}
			}
			if err := m.StageEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictExecutionDuringTimeWindow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestrictExecutionDuringTimeWindow = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictedExecutionWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RestrictedExecutionWindow == nil {
				m.RestrictedExecutionWindow = &RestrictedExecutionWindow{}
			}
			if err := m.RestrictedExecutionWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipWindowText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkipWindowText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloudProvider", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CloudProvider = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Moniker == nil {
				m.Moniker = &Moniker{}
			}
			if err := m.Moniker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamespaceOverride", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NamespaceOverride = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManifestArtifactAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManifestArtifactAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManifestArtifactId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManifestArtifactId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 108:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipExpressionEvaluation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipExpressionEvaluation = bool(v != 0)
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manifests", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manifests = append(m.Manifests, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredArtifactIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequiredArtifactIds = append(m.RequiredArtifactIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 111:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrafficManagement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrafficManagement == nil {
				m.TrafficManagement = &DeployManifestStage_TrafficManagement{}
			}
			if err := m.TrafficManagement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 112:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedArtifacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedArtifacts = append(m.ExpectedArtifacts, &ExpectedArtifact{})
			if err := m.ExpectedArtifacts[len(m.ExpectedArtifacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployManifestStage_TrafficManagement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficManagement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficManagement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &DeployManifestStage_TrafficManagement_Options{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeployManifestStage_TrafficManagement_Options) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Options: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Options: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTraffic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTraffic = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BakeManifestStage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BakeManifestStage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BakeManifestStage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequisiteStageRefIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequisiteStageRefIds = append(m.RequisiteStageRefIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendNotifications", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendNotifications = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageTimeoutMs", wireType)
			}
			m.StageTimeoutMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageTimeoutMs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteOtherBranchesThenFail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompleteOtherBranchesThenFail = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinuePipeline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ContinuePipeline = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailPipeline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailPipeline = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailOnFailedExpressions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FailOnFailedExpressions = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StageEnabled == nil {
				m.StageEnabled = &StageEnabled{}
			}
			if err := m.StageEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictExecutionDuringTimeWindow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RestrictExecutionDuringTimeWindow = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestrictedExecutionWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RestrictedExecutionWindow == nil {
				m.RestrictedExecutionWindow = &RestrictedExecutionWindow{}
			}
			if err := m.RestrictedExecutionWindow.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipWindowText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkipWindowText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateRenderer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateRenderer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputArtifacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InputArtifacts = append(m.InputArtifacts, &InputArtifact{})
			if err := m.InputArtifacts[len(m.InputArtifacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overrides", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Overrides == nil {
				m.Overrides = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStage
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthStage
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthStage
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthStage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Overrides[mapkey] = mapvalue
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedArtifacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpectedArtifacts = append(m.ExpectedArtifacts, &ExpectedArtifact{})
			if err := m.ExpectedArtifacts[len(m.ExpectedArtifacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStage
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthStage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthStage
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStage   = fmt.Errorf("proto: integer overflow")
)
